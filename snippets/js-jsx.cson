".source.js":
  "<tag>":
    "prefix": "<"
    "body":
      """
      <${1:tag}>$0</${1:tag}>
      """


  "<tag/>":
    "prefix": "<<"
    "body":
      """
      <${1:tag}/>$0
      """


  "destrucring assignment":
    "prefix": "da"
    "body":
      """
      ${1:const} { ${2} } = ${3:this.props};$0
      """


  "constructor":
    "prefix": "ctr"
    "body":
      """
      constructor(props) {
        super(props);$0
      }
      """



  "jsx":
    "prefix": "jsx"
    "body":
      """
      import React from 'react';


      /**
       * $0
       */
      export default class ${1:Name} extends React.Component {
        static propTypes = {};
        static defaultProps = {};

        render() {
          return (
            <div>${1:Name}</div>
          );
        }
      }
      """


  "jsx (Radian)":
    "prefix": "jsxx"
    "body":
      """
      import React from 'react';
      import Radium from 'radium';
      import { css, PropTypes } from './util';


      /**
       * $0
       */
      class ${1:Name} extends React.Component {
        static propTypes = {};
        static defaultProps = {};

        styles() {
          return css({
            base: {},
          });
        }

        render() {
          const styles = this.styles();
          return (
            <div style={ styles.base }>${1:Name}</div>
          );
        }
      }


      export default Radium(${1:Name});
      """




  "React: Static Prop Types":
    "prefix": "spt"
    "body":
      """
      static propTypes = {$0};
      static defaultProps = {};
      """





  "React: PropType":
    "prefix": "rpt"
    "body":
      """
      ${1:propName}: ${2:React.}PropTypes.$0,
      """


  "React: className":
    "prefix": "cln"
    "body":
      """
      className="${1:name}"$0
      """


  "React Lifecycle Methods":
    "prefix": "life"
    "body":
      """
      componentWillMount() {}
      componentDidMount() {}
      componentWillReceiveProps(nextProps) {}
      shouldComponentUpdate(nextProps, nextState) {}
      componentWillUpdate(nextProps, nextState) {}
      componentDidUpdate(prevProps, prevState) {}
      componentWillUnmount() {}

      """


  "React: findDOMNode()":
    "prefix": "fdn"
    "body":
      """
      ReactDOM.findDOMNode(${1:component});$0
      """


  "React: dangerouslySetInnerHTML":
    "prefix": "danger"
    "body":
      """
      <${1:span} dangerouslySetInnerHTML={{ __html: ${2:html} }} />$0
      """


  "React: className":
    "prefix": "cn"
    "body":
      """
      className="${0}"
      """
