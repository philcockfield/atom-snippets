".source.js":
  "<tag>":
    "prefix": "<"
    "body":
      """
      <${1:tag}>$0</${1:tag}>
      """


  "<tag/>":
    "prefix": "<<"
    "body":
      """
      <${1:tag}/>$0
      """


  "destrucring assignment":
    "prefix": "da"
    "body":
      """
      const { ${1} } = ${2:this.props};$0
      """


  "constructor":
    "prefix": "ctr"
    "body":
      """
      constructor(props) {
        super(props);$0
      }
      """



  "jsx":
    "prefix": "jsx"
    "body":
      """
      import React from "react";


      /**
       * $0
       */
      export default class ${1:Name} extends React.Component {
        constructor(props) {
          super(props);
        }

        render() {
          return (
            <div>${1:Name}</div>
          );
        }
      }

      // API -------------------------------------------------------------------------
      ${1:Name}.propTypes = {};
      ${1:Name}.defaultProps = {};
      """


  "jsx (Radian)":
    "prefix": "jsxx"
    "body":
      """
      import React from "react";
      import Radium from "radium";


      /**
       * $0
       */
      @Radium
      export default class ${1:Name} extends React.Component {
        constructor(props) {
          super(props);
        }

        styles() {
          return {
            base: {}
          };
        }

        render() {
          const styles = this.styles();
          return (
            <div style={ styles.base }>${1:Name}</div>
          );
        }
      }

      // API -------------------------------------------------------------------------
      ${1:Name}.propTypes = {};
      ${1:Name}.defaultProps = {};
      """


  "React: PropType":
    "prefix": "rpt"
    "body":
      """
      ${1:propName}: ${2:React.}PropTypes.$0,
      """


  "React: className":
    "prefix": "cln"
    "body":
      """
      className="${1:name}"$0
      """


  "React Lifecycle Methods":
    "prefix": "life"
    "body":
      """
      componentWillMount() {}
      componentDidMount() {}
      componentWillReceiveProps(nextProps) {}
      shouldComponentUpdate(nextProps, nextState) {}
      componentWillUpdate(nextProps, nextState) {}
      componentDidUpdate(prevProps, prevState) {}
      componentWillUnmount() {}

      """


  "React: findDOMNode()":
    "prefix": "rdn"
    "body":
      """
      React.findDOMNode(${1:component});$0
      """
