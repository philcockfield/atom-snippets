".source.js, .source.ts, .source.tsx":

  "use-strict":
    "prefix": "us"
    "body":
      """
      "use strict"
      """


  "const":
    "prefix": "c"
    "body":
      """
      const $0
      """


  "export":
    "prefix": "e"
    "body":
      """
      export $0
      """



  "export const":
    "prefix": "ec"
    "body":
      """
      export const $0
      """


  "debugger":
    "prefix": "deb"
    "body":
      """
      debugger;
      """



  "undefined":
    "prefix": "und"
    "body":
      """
      undefined
      """


  "this.":
    "prefix": "th"
    "body":
      """
      this.
      """

  "return":
    "prefix": "ret"
    "body":
      """
      return $0
      """


  ".function(params)":
    "prefix": "pp"
    "body":
      """
      ${1:name}($0);
      """


  "{};":
    "prefix": "bb"
    "body":
      """
      {$0};
      """

  "{},":
    "prefix": "bv"
    "body":
      """
      {$0},
      """


  "[];":
    "prefix": "aa"
    "body":
      """
      [$0];
      """


  "();":
    "prefix": "bbb"
    "body":
      """
      ($0);
      """



  "if (single line)":
    "prefix": "ifs"
    "body":
      """
      if (${1:condition}) { $0; }
      """


  "if/else":
    "prefix": "ife"
    "body":
      """
      if (${1:condition}) {
        $0
      } else {

      }
      """


  "forEach":
    "prefix": "ffe"
    "body":
      """
      forEach(${1:item} => {$0});
      """


  "forOf":
    "prefix": "forof"
    "body":
      """
      for (const ${1:item} of ${2:items}) {
        $0
      }
      """





  "map":
    "prefix": "map"
    "body":
      """
      map(${1:item} => {$0});
      """

  "filter":
    "prefix": "filter"
    "body":
      """
      filter(${1:item} => {$0});
      """

  "reduce":
    "prefix": "reduce"
    "body":
      """
      reduce((acc, value, i) => {$0}, ${1:initial});
      """



  "module-exports":
    "prefix": "me"
    "body":
      """
      module.exports = $0
      """




  "try/catch":
    "prefix": "try"
    "body":
      """
      try {
        $0
      } catch (err) {

      }

      """



  "switch":
    "prefix": "switch"
    "body":
      """
      switch (${1:value}) {
        case ${2:expression}:
          $0
          break;
        default:

      }

      """


  "function":
    "prefix": "fn"
    "body":
      """
      ${1:export }${2:async }function ${3:name}($4) {
        $0
      }
      """




