'.source.coffee':

  '<tag></tag>':
    'prefix': '<'
    'body':
      """
      <${1:tag}>$0</${1:tag}>
      """


  '<tag/>':
    'prefix': '<<'
    'body':
      """
      <${1:tag}/>$0
      """


  '<div>':
    'prefix': 'div'
    'body':
      """
      <div className="${1:class}">$0</div>
      """



  'className':
    'prefix': 'cn'
    'body':
      """
      className='$1'$0
      """




  'jsx':
    'prefix': 'jsx'
    'body':
      """
      'use strict'
      React = require('react')
      css = require('react-css')


      class ${1:Name} extends React.Component
        css: css.inline

        styles: -> @css()
        classes: ->
          'default':
            root: {}

        render: ->
          <div is="root">
            ${1:Name}
          </div>$0


      module.exports = ${1:Name}
      """



  'jsx simple':
    'prefix': 'jsxs'
    'body':
      """
      'use strict'
      React = require('react')


      class ${1:Name} extends React.Component
        render: ->
          <div>
            ${1:Name}
          </div>$0


      module.exports = ${1:Name}
      """



  'React class':
    'prefix': 'rrcl'
    'body':
      """
      class ${1:Name} extends React.Component
        css: css.inline

        styles: -> @css()
        classes: ->
          'default':
            root: {}

        render: ->
          <div is="root">
            ${1:Name}
          </div>$0
      """



  'CSS test styles':
    'prefix': 'csstest'
    'prefix': 'csstest'
    'body':
      """
      background: 'rgba(255, 0, 0, 0.1)'
      border: 'dashed 1px rgba(0, 0, 0, 0.3)'
      padding: 20
      borderRadius: 5
      """





  'React Lifecycle Methods':
    'prefix': 'rrlife'
    'body':
      """
      componentWillMount: ->
      componentDidMount: ->
      componentWillReceiveProps: (nextProps) ->
      shouldComponentUpdate: (nextProps, nextState) ->
      componentWillUpdate: (nextProps, nextState) ->
      componentDidUpdate: (prevProps, prevState) ->
      componentWillUnmount: ->

      """



  'React: getDOMNode()':
    'prefix': 'gdn'
    'body':
      """
      getDOMNode()
      """


  'React: dangerouslySetInnerHTML':
    'prefix': 'danger'
    'body':
      """
      <${1:span} dangerouslySetInnerHTML={{__html: ${2:html}}} />$0
      """
